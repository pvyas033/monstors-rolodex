{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","type","className","onChange","Card","props","alt","src","monstor","id","name","email","CardList","monsters","map","App","e","setState","search","target","value","state","fetch","then","response","json","this","filteredMonster","filter","monster","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,KAAK,SACLC,UAAU,SACVH,YAAaA,EACbI,SAAUH,KCLLI,G,MAAO,SAACC,GAAD,OAChB,sBAAKH,UAAU,iBAAf,UACI,qBAAKI,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,aCHbC,G,MAAW,SAACP,GACrB,OACI,qBAAKH,UAAU,YAAf,SAEQG,EAAMQ,SAASC,KACX,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCuCpCM,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAiBFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CACbC,OAAQF,EAAEG,OAAOC,SAlBlB,EAAKC,MAAQ,CACXR,SAAU,GACVK,OAAQ,IAJE,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OACJ,EAAKR,SAAS,CACZJ,SAAUY,S,oBAWlB,WAAU,IAAD,EACoBC,KAAKL,MAAzBR,EADA,EACAA,SAAUK,EADV,EACUA,OACXS,EAAkBd,EAASe,QAAO,SAAAC,GACtC,OAAOA,EAAQnB,KAAKoB,cAAcC,SAASb,EAAOY,kBAEpD,OACE,sBAAK5B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CACEH,YAAY,iBACZC,aAAc0B,KAAK1B,eAErB,cAAC,EAAD,CAAUa,SAAUc,W,GArCRK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e9e76f25.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n    <input \r\n        type=\"search\"\r\n        className=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    ></input>\r\n)","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monstor.id}?set=set2&size=180x180`}></img>\r\n        <h1>{props.monstor.name}</h1>\r\n        <p>{props.monstor.email}</p>\r\n    </div>  \r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) =>{\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n                props.monsters.map(\r\n                    monstor => (<Card key={monstor.id} monstor={monstor}></Card>)\r\n                )\r\n            }        \r\n        </div>\r\n    )\r\n}","import \"./App.css\";\nimport { Component } from \"react\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport { CardList } from \"./components/card-list/card-list.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      search: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((json) =>\n        this.setState({\n          monsters: json,\n        })\n      );\n  }\n\n  handleChange = (e) =>{\n    this.setState({\n     search: e.target.value\n    })\n  }\n\n  render() {\n    const {monsters, search} = this.state;\n    const filteredMonster = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(search.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox \n        placeholder=\"search monster\"\n        handleChange={this.handleChange}\n      />\n      <CardList monsters={filteredMonster}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}